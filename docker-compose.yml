services:
  postgres-account:
    image: postgres:16
    container_name: hint1k_postgres-account
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: myapp2
    ports:
      - "5432:5432"
    volumes:
      - ./account-service/src/main/resources/sql-scripts/init1.sql:/docker-entrypoint-initdb.d/init1.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  postgres-customer:
    image: postgres:16
    container_name: hint1k_postgres-customer
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: myapp2
    ports:
      - "5433:5432"
    volumes:
      - ./customer-service/src/main/resources/sql-scripts/init2.sql:/docker-entrypoint-initdb.d/init2.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  postgres-gateway:
    image: postgres:16
    container_name: hint1k_postgres-gateway
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: myapp2
    ports:
      - "5434:5432"
    volumes:
      - ./gateway-service/src/main/resources/sql-scripts/init3.sql:/docker-entrypoint-initdb.d/init3.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  postgres-transaction:
    image: postgres:16
    container_name: hint1k_postgres-transaction
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: myapp2
    ports:
      - "5435:5432"
    volumes:
      - ./transaction-service/src/main/resources/sql-scripts/init4.sql:/docker-entrypoint-initdb.d/init4.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    volumes:
      - gradle-cache:/home/gradle/.gradle
    container_name: hint1k_account-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-account:5432/myapp2
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: 123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres-account
      - kafka
    ports:
      - "8084:8080"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    volumes:
      - gradle-cache:/home/gradle/.gradle
    container_name: hint1k_customer-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-customer:5432/myapp2
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: 123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres-customer
      - kafka
    ports:
      - "8083:8080"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    volumes:
      - gradle-cache:/home/gradle/.gradle
    container_name: hint1k_gateway-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-gateway:5432/myapp2
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: 123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres-gateway
      - kafka
    ports:
      - "8082:8080"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
    volumes:
      - gradle-cache:/home/gradle/.gradle
    container_name: hint1k_transaction-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-transaction:5432/myapp2
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: 123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres-transaction
      - kafka
    ports:
      - "8081:8080"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  web-service:
    build:
      context: ./web-service
      dockerfile: Dockerfile
    volumes:
      - gradle-cache:/home/gradle/.gradle
    container_name: hint1k_web-service
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: hint1k_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: hint1k_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: hint1k_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - ./data/zookeeper:/var/lib/zookeeper
      - ./log/zookeeper:/var/log/zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 2181" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  gradle-cache: